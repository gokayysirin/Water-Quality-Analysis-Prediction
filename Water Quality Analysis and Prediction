{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":2157486,"sourceType":"datasetVersion","datasetId":1292407}],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/gokaysirin/water-quality-analysis-prediction?scriptVersionId=200136215\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"# Welcome to the Water Quality Dataset!\n* In this dataset, we will analyze and predict water quality (specifically, whether it is drinkable or non-drinkable) using various metrics.\n\n* It must be said, it is a great shame for humanity that in the 21st century, there are still people without access to clean water. Let’s hope this issue is resolved as soon as possible!","metadata":{}},{"cell_type":"markdown","source":"## A Quick Overview of the Data.\n\n#### Water Quality Parameters Summary\n\n1. **pH Value**:  \n   pH indicates the acid-base balance of water. WHO recommends a pH range of 6.5 to 8.5. Current investigation shows values between 6.52 and 6.83, which are within this range.\n\n2. **Hardness**:  \n   Hardness is caused by dissolved calcium and magnesium salts, impacting water's ability to lather soap. It is determined by the contact time between water and geological deposits.\n\n3. **Total Dissolved Solids (TDS)**:  \n   TDS measures dissolved inorganic and organic minerals. A high TDS value indicates highly mineralized water. The desirable limit is 500 mg/L, with a maximum of 1000 mg/L for drinking purposes.\n\n4. **Chloramines**:  \n   Formed when ammonia is added to chlorine, chloramines disinfect water. Levels up to 4 mg/L are safe for drinking.\n\n5. **Sulfate**:  \n   Sulfates are naturally occurring and prevalent in soil and rocks. Concentrations in freshwater range from 3 to 30 mg/L, with some areas having higher levels up to 1000 mg/L.\n\n6. **Conductivity**:  \n   Electrical conductivity increases with the concentration of dissolved ions. WHO recommends a maximum conductivity of 400 μS/cm.\n\n7. **Total Organic Carbon (TOC)**:  \n   TOC measures carbon from organic compounds. For drinking water, TOC should be less than 2 mg/L, with source water having up to 4 mg/L.\n\n8. **Trihalomethanes (THMs)**:  \n   Formed during chlorine treatment, THMs should not exceed 80 ppm in drinking water.\n\n9. **Turbidity**:  \n   A measure of water clarity, affected by suspended solids. WHO recommends a turbidity value below 5 NTU, with 0.98 NTU observed in the study.\n\n10. **Potability**:  \n    Indicates if water is safe for consumption, where 1 means potable and 0 means not potable.\n","metadata":{}},{"cell_type":"markdown","source":"## What are We Going to Do?\n* Data Preprocessing\n* Missing Data Analysis\n* Data Visualization\n* Model Building with sklearn Library","metadata":{}},{"cell_type":"markdown","source":"# Data Preproccessing","metadata":{}},{"cell_type":"markdown","source":"## Import Libraries","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import accuracy_score,classification_report,ConfusionMatrixDisplay,precision_score,confusion_matrix\nimport plotly.express as px\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import RandomizedSearchCV,RepeatedStratifiedKFold,cross_val_score\nimport missingno as msno\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier","metadata":{"execution":{"iopub.status.busy":"2024-10-09T07:02:41.438506Z","iopub.execute_input":"2024-10-09T07:02:41.439035Z","iopub.status.idle":"2024-10-09T07:02:41.448225Z","shell.execute_reply.started":"2024-10-09T07:02:41.438986Z","shell.execute_reply":"2024-10-09T07:02:41.446695Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Import Dataset&Take a Look","metadata":{}},{"cell_type":"code","source":"df = pd.read_csv(\"/kaggle/input/water-potability/water_potability.csv\")\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2024-10-09T07:02:41.450552Z","iopub.execute_input":"2024-10-09T07:02:41.4511Z","iopub.status.idle":"2024-10-09T07:02:41.527418Z","shell.execute_reply.started":"2024-10-09T07:02:41.45104Z","shell.execute_reply":"2024-10-09T07:02:41.525834Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"* It seems that we have some missing data, so we’ve got some work ahead of us! :)\n","metadata":{}},{"cell_type":"code","source":"df.describe()","metadata":{"execution":{"iopub.status.busy":"2024-10-09T07:02:41.530227Z","iopub.execute_input":"2024-10-09T07:02:41.530863Z","iopub.status.idle":"2024-10-09T07:02:41.582185Z","shell.execute_reply.started":"2024-10-09T07:02:41.530802Z","shell.execute_reply":"2024-10-09T07:02:41.580894Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"* We have columns with different ranges, for example, the Trihalomethanes column ranges from 0.73 to 124, while the pH column has values between 0 and 14. In the upcoming steps, we will scale these values to enhance our analysis processes.","metadata":{}},{"cell_type":"markdown","source":"## Missing Value Analysis","metadata":{}},{"cell_type":"code","source":"df.info()","metadata":{"execution":{"iopub.status.busy":"2024-10-09T07:02:41.583563Z","iopub.execute_input":"2024-10-09T07:02:41.583953Z","iopub.status.idle":"2024-10-09T07:02:41.59769Z","shell.execute_reply.started":"2024-10-09T07:02:41.583912Z","shell.execute_reply":"2024-10-09T07:02:41.596267Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"* We have missing data in the pH, Sulfate, and Trihalomethanes columns. We will fill these gaps with the mean values, thus addressing the missing data without affecting the relationships between the columns.","metadata":{}},{"cell_type":"code","source":"df[\"ph\"] = df[\"ph\"].fillna(value=df[\"ph\"].mean())\ndf[\"Sulfate\"] = df[\"Sulfate\"].fillna(value=df[\"Sulfate\"].mean())\ndf[\"Trihalomethanes\"] = df[\"Trihalomethanes\"].fillna(value=df[\"Trihalomethanes\"].mean())","metadata":{"execution":{"iopub.status.busy":"2024-10-09T07:02:41.601069Z","iopub.execute_input":"2024-10-09T07:02:41.601549Z","iopub.status.idle":"2024-10-09T07:02:41.618239Z","shell.execute_reply.started":"2024-10-09T07:02:41.601494Z","shell.execute_reply":"2024-10-09T07:02:41.616778Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"* Just to be safe, let's double-check!","metadata":{}},{"cell_type":"code","source":"df.info()","metadata":{"execution":{"iopub.status.busy":"2024-10-09T07:02:41.620066Z","iopub.execute_input":"2024-10-09T07:02:41.620673Z","iopub.status.idle":"2024-10-09T07:02:41.643736Z","shell.execute_reply.started":"2024-10-09T07:02:41.620605Z","shell.execute_reply":"2024-10-09T07:02:41.642115Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"* Everything is ready, let’s move forward!","metadata":{}},{"cell_type":"markdown","source":"# Data Visualization","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize=(8, 6))\nax = sns.countplot(data=df, x=\"Potability\", palette=\"deep\")\n\n# Calculate percentages\ntotal = len(df)\nfor p in ax.patches:\n    percentage = f'{100 * p.get_height() / total:.2f}%'\n    ax.annotate(percentage, \n                (p.get_x() + p.get_width() / 2., p.get_height()), \n                ha = 'center', va = 'baseline', \n                fontsize = 12, color = 'black', xytext = (0, 5), \n                textcoords = 'offset points')\n\n# Show plot\nplt.title(\"Potability Count with Percentages\")\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-10-09T07:02:41.645812Z","iopub.execute_input":"2024-10-09T07:02:41.646659Z","iopub.status.idle":"2024-10-09T07:02:41.926209Z","shell.execute_reply.started":"2024-10-09T07:02:41.646605Z","shell.execute_reply":"2024-10-09T07:02:41.924674Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"* The majority of our data consists of non-drinkable water samples.","metadata":{}},{"cell_type":"code","source":"sns.clustermap(df.corr(), cmap=\"vlag\",dendrogram_ratio=(0.1,0.2),annot=True,linewidth=.8,figsize=(9,10))","metadata":{"execution":{"iopub.status.busy":"2024-10-09T07:02:41.929687Z","iopub.execute_input":"2024-10-09T07:02:41.930136Z","iopub.status.idle":"2024-10-09T07:02:43.092583Z","shell.execute_reply.started":"2024-10-09T07:02:41.930091Z","shell.execute_reply":"2024-10-09T07:02:43.091207Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"> There could be several possible reasons for the low correlations. For instance, the water samples in our dataset might have been collected from a wide variety of different sources. A lack of variation in our dataset could also lead to the same issue. Additionally, if the analyzed data was collected at different times or locations, it could contribute to the low correlations. For example, some parameters might vary seasonally.","metadata":{}},{"cell_type":"code","source":"potability_zero = df.query(\"Potability == 0\")\npotable = df.query(\"Potability == 1\")\n\nplt.figure(figsize = (15,15))\nfor ax, col in enumerate(df.columns[:9]):\n    plt.subplot(3,3,ax+1)\n    plt.title(col)\n    sns.kdeplot(x=potability_zero[col],label = \"Non Potable\")\n    sns.kdeplot(x = potable[col],label = \"Potable\")\n    plt.legend()\nplt.tight_layout()","metadata":{"execution":{"iopub.status.busy":"2024-10-09T07:02:43.094343Z","iopub.execute_input":"2024-10-09T07:02:43.094737Z","iopub.status.idle":"2024-10-09T07:02:47.034412Z","shell.execute_reply.started":"2024-10-09T07:02:43.094698Z","shell.execute_reply":"2024-10-09T07:02:47.032485Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"> In some column relationships, the data for drinkable and non-drinkable water appears almost identical. Fortunately, a few values like pH and Sulfate seem like they might help our model.","metadata":{}},{"cell_type":"code","source":"sns.scatterplot(x=\"ph\",y=\"Potability\",data=df)","metadata":{"execution":{"iopub.status.busy":"2024-10-09T07:02:47.037035Z","iopub.execute_input":"2024-10-09T07:02:47.037634Z","iopub.status.idle":"2024-10-09T07:02:47.361457Z","shell.execute_reply.started":"2024-10-09T07:02:47.037579Z","shell.execute_reply":"2024-10-09T07:02:47.36009Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Modelling","metadata":{}},{"cell_type":"markdown","source":"## Train Test Split","metadata":{}},{"cell_type":"code","source":"X = df.drop(\"Potability\",axis=1)\ny= df[\"Potability\"]","metadata":{"execution":{"iopub.status.busy":"2024-10-09T07:02:47.365479Z","iopub.execute_input":"2024-10-09T07:02:47.365928Z","iopub.status.idle":"2024-10-09T07:02:47.374056Z","shell.execute_reply.started":"2024-10-09T07:02:47.365884Z","shell.execute_reply":"2024-10-09T07:02:47.372797Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=13)","metadata":{"execution":{"iopub.status.busy":"2024-10-09T07:02:47.375569Z","iopub.execute_input":"2024-10-09T07:02:47.375998Z","iopub.status.idle":"2024-10-09T07:02:47.388264Z","shell.execute_reply.started":"2024-10-09T07:02:47.37595Z","shell.execute_reply":"2024-10-09T07:02:47.387068Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Scaling","metadata":{}},{"cell_type":"code","source":"scaler = MinMaxScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.fit_transform(X_test)","metadata":{"execution":{"iopub.status.busy":"2024-10-09T07:02:47.390202Z","iopub.execute_input":"2024-10-09T07:02:47.390744Z","iopub.status.idle":"2024-10-09T07:02:47.409936Z","shell.execute_reply.started":"2024-10-09T07:02:47.390688Z","shell.execute_reply":"2024-10-09T07:02:47.4079Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Model Building","metadata":{}},{"cell_type":"code","source":"models =[\n    (\"Decision Tree Classifier\", DecisionTreeClassifier(max_depth=3)),\n    (\"Random Forest\", RandomForestClassifier())\n]","metadata":{"execution":{"iopub.status.busy":"2024-10-09T07:02:47.411794Z","iopub.execute_input":"2024-10-09T07:02:47.412288Z","iopub.status.idle":"2024-10-09T07:02:47.421388Z","shell.execute_reply.started":"2024-10-09T07:02:47.412225Z","shell.execute_reply":"2024-10-09T07:02:47.419543Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"finalResults = []\n\ncmList = []\n\nfor name, model in models:\n    model.fit(X_train_scaled,y_train)\n    model_result = model.predict(X_test_scaled)\n    score = precision_score(y_test,model_result)\n    cm = confusion_matrix(y_test, model_result)\n\n    finalResults.append((name,score))\n    cmList.append((name,cm))\nfinalResults","metadata":{"execution":{"iopub.status.busy":"2024-10-09T07:02:47.423351Z","iopub.execute_input":"2024-10-09T07:02:47.423942Z","iopub.status.idle":"2024-10-09T07:02:48.654402Z","shell.execute_reply.started":"2024-10-09T07:02:47.423881Z","shell.execute_reply":"2024-10-09T07:02:48.653126Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"* Although these are not the worst results in the world, they are definitely not great either. Let's first take a look at the Confusion Matrix, and then we’ll work on improving our model.","metadata":{}},{"cell_type":"code","source":"for name, i in cmList:\n    plt.figure()\n    sns.heatmap(i,annot=True,linewidths=0.7,fmt=\".1f\")\n    plt.title(name)\n    plt.show","metadata":{"execution":{"iopub.status.busy":"2024-10-09T07:02:48.656016Z","iopub.execute_input":"2024-10-09T07:02:48.656444Z","iopub.status.idle":"2024-10-09T07:02:49.340511Z","shell.execute_reply.started":"2024-10-09T07:02:48.656401Z","shell.execute_reply":"2024-10-09T07:02:49.339245Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"* Let's try to build something better with Random Forest","metadata":{}},{"cell_type":"markdown","source":"## Hyperparameter Search","metadata":{}},{"cell_type":"code","source":"model_params = {\n    \"Random Forest\" :\n    {\n        \"model\": RandomForestClassifier(),\n        \"params\":\n        {\n            \"n_estimators\":[10,50,100,200,500],\n            \"max_features\":[\"auto\",\"sqrt\",\"log2\"],\n            \"max_depth\":list(range(1,15,3))\n        }\n    }\n}\nmodel_params","metadata":{"execution":{"iopub.status.busy":"2024-10-09T07:02:49.341867Z","iopub.execute_input":"2024-10-09T07:02:49.342263Z","iopub.status.idle":"2024-10-09T07:02:49.354388Z","shell.execute_reply.started":"2024-10-09T07:02:49.342222Z","shell.execute_reply":"2024-10-09T07:02:49.35293Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"cv = RepeatedStratifiedKFold(n_splits=5,n_repeats=2)\nscores=[]\nfor model_name,params in model_params.items():\n    rs = RandomizedSearchCV(params[\"model\"],params[\"params\"],cv=cv,n_iter=10)\n    rs.fit(X,y)\n    scores.append([model_name,dict(rs.best_params_),rs.best_score_])\nscores","metadata":{"execution":{"iopub.status.busy":"2024-10-09T07:02:49.355956Z","iopub.execute_input":"2024-10-09T07:02:49.356385Z","iopub.status.idle":"2024-10-09T07:04:42.878977Z","shell.execute_reply.started":"2024-10-09T07:02:49.356338Z","shell.execute_reply":"2024-10-09T07:04:42.877628Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"> A slight improvement, but still not a result we can call very good. Although trying different models could take us further, we can stop here for now.","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize=(6,5))\nsns.heatmap(cm, annot=True, fmt='g', cmap='Blues')\nplt.title(\"Confusion Matrix - Random Forest\")\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-10-09T07:18:46.353927Z","iopub.execute_input":"2024-10-09T07:18:46.354536Z","iopub.status.idle":"2024-10-09T07:18:46.865975Z","shell.execute_reply.started":"2024-10-09T07:18:46.354482Z","shell.execute_reply":"2024-10-09T07:18:46.864341Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Conclusion","metadata":{}},{"cell_type":"markdown","source":"We can’t say we wrote the best code in the world, but we’ve definitely made progress. Much better results can be achieved with different models and approaches. If you have any experiments or feedback, I’m here and happy to assist. Stay healthy!","metadata":{}}]}